# 1 背景
最近在看cpp的书，讲到全局变量的初始化顺序，不刻意排列链接顺序的情况下，如果全局变量/全局的静态变量有相互依赖，而依赖的对象恰好还没来得及初始化，则就会报错退出，而且，更不幸的是，全局变量/全局静态变量的初始化是在main函数之前，很难debug发现这种异常。由此想到JAVA中，类的static的变量经常依赖别的静态变量，却没看到这种问题，就在合理记录思考一下。

解决静态全局变量初始化的相互依赖问题    https://blog.csdn.net/liangjunjie_123/article/details/43193741

有趣的bug——Java静态变量的循环依赖   https://www.cnblogs.com/jason1990/p/11856296.html

单例模式-静态内部类实现及原理剖析    https://www.cnblogs.com/niuyourou/p/11892617.html

使用静态内部类的优点是：因为外部类对内部类的引用属于被动引用，不属于前面提到的三种必须进行初始化的情况，所以加载类本身并不需要同时加载内部类。在需要实例化该类是才触发内部类的加载以及本类的实例化，做到了延时加载（懒加载），节约内存。同时因为JVM会保证一个类的<cinit>()方法（初始化方法）执行时的线程安全，从而保证了实例在全局的唯一性。